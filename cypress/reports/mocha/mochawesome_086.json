{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2024-10-25T03:05:32.620Z",
    "end": "2024-10-25T03:05:40.824Z",
    "duration": 8204,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8301d04e-93db-4699-861a-1c97005c767d",
      "title": "",
      "fullFile": "cypress/e2e/1-getting-started/bmiCheck.cy.js",
      "file": "cypress/e2e/1-getting-started/bmiCheck.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8fe889b3-e540-474b-a8dc-37f9810915fc",
          "title": "BMI Check",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "check BMI with age and gender",
              "fullTitle": "BMI Check check BMI with age and gender",
              "timedOut": null,
              "duration": 6613,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Set the input values for gender, age, weight, and height\ncy.get('#gender').select('Male'); // Assuming a select element for gender\ncy.get('#age').type('25');\ncy.get('#weight').type('60');\ncy.get('#height').type('170');\n// Click on the button to calculate BMI (assuming there's a button to submit the form)\ncy.get('.btn-primary').click();\n// Capture the age, gender, weight, and height, calculate the expected BMI, and compare with the displayed BMI\ncy.get('#weight').invoke('val').then(weightValue => {\n  cy.get('#height').invoke('val').then(heightValue => {\n    cy.get('#age').invoke('val').then(ageValue => {\n      cy.get('#gender').invoke('val').then(genderValue => {\n        const weight = parseFloat(weightValue);\n        const height = parseFloat(heightValue) / 100; // Convert height to meters\n        const age = parseInt(ageValue);\n        const gender = genderValue;\n        // Calculate the expected BMI\n        const expectedBmi = (weight / (height * height)).toFixed(2);\n        // Determine expected BMI range based on age and gender, if applicable\n        // For this example, letâ€™s assume there are different categories or ranges for BMI based on age and gender\n        let expectedRange;\n        if (gender === 'Male') {\n          if (age < 18) {\n            expectedRange = [18, 24]; // Example BMI range for males under 18\n          } else {\n            expectedRange = [20, 25]; // Example BMI range for adult males\n          }\n        } else {\n          if (age < 18) {\n            expectedRange = [17, 23]; // Example BMI range for females under 18\n          } else {\n            expectedRange = [19, 24]; // Example BMI range for adult females\n          }\n        }\n        // Assert the displayed BMI value dynamically\n        cy.get('#bmi-result').invoke('text').then(displayedBmi => {\n          const displayedBmiValue = parseFloat(displayedBmi);\n          expect(displayedBmiValue).to.be.closeTo(parseFloat(expectedBmi), 0.01);\n          // Optionally, assert if BMI falls within the expected range\n          expect(displayedBmiValue).to.be.within(expectedRange[0], expectedRange[1]);\n        });\n      });\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#bmi-result`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 4000ms: Expected to find element: `#bmi-result`, but never found it.\n    at Context.eval (webpack://cypress/./cypress/e2e/1-getting-started/bmiCheck.cy.js:48:31)",
                "diff": null
              },
              "uuid": "1d2f7d95-df7a-4cfd-b4b6-cfe6414b8ca9",
              "parentUUID": "8fe889b3-e540-474b-a8dc-37f9810915fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1d2f7d95-df7a-4cfd-b4b6-cfe6414b8ca9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6613,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mocha",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}